// <auto-generated />
using System;
using Artour.Domain.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Artour.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190410131045_Extension")]
    partial class Extension
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Artour.Domain.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("city_id");

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Artour.Domain.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_id");

                    b.Property<int>("Mark")
                        .HasColumnName("mark");

                    b.Property<string>("Text")
                        .HasColumnName("text");

                    b.Property<int>("TourId")
                        .HasColumnName("tour_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId");

                    b.HasIndex("TourId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("Artour.Domain.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("country_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id");

                    b.HasKey("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Artour.Domain.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("region_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("RegionId");

                    b.ToTable("region");
                });

            modelBuilder.Entity("Artour.Domain.Models.Sight", b =>
                {
                    b.Property<int>("SightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sight_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<int>("TourId")
                        .HasColumnName("tour_id");

                    b.HasKey("SightId");

                    b.HasIndex("TourId");

                    b.ToTable("sight");
                });

            modelBuilder.Entity("Artour.Domain.Models.SightImage", b =>
                {
                    b.Property<int>("SightImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sight_image_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("FileSize")
                        .HasColumnName("file_size");

                    b.Property<string>("FullFilename")
                        .HasColumnName("full_file_name");

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<int>("SightId")
                        .HasColumnName("sight_id");

                    b.Property<DateTime?>("UploadedOn")
                        .HasColumnName("uploaded_on");

                    b.HasKey("SightImageId");

                    b.HasIndex("SightId");

                    b.ToTable("sight_image");
                });

            modelBuilder.Entity("Artour.Domain.Models.SightSeen", b =>
                {
                    b.Property<int>("SightSeenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sight_seen_id");

                    b.Property<DateTimeOffset>("DateSeen")
                        .HasColumnName("date_seen");

                    b.Property<int>("SightId")
                        .HasColumnName("sight_id");

                    b.Property<Guid>("VisitId")
                        .HasColumnName("visit_id");

                    b.HasKey("SightSeenId");

                    b.HasIndex("SightId");

                    b.HasIndex("VisitId");

                    b.ToTable("sight_seen");
                });

            modelBuilder.Entity("Artour.Domain.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tour_id");

                    b.Property<int?>("CityId")
                        .HasColumnName("city_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("OwnerId")
                        .HasColumnName("owner_id");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.HasKey("TourId");

                    b.HasIndex("CityId");

                    b.ToTable("tour");
                });

            modelBuilder.Entity("Artour.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnName("password");

                    b.Property<int>("ProfileType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("profile_type")
                        .HasDefaultValue(1);

                    b.Property<string>("Username")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Artour.Domain.Models.Visit", b =>
                {
                    b.Property<Guid>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visit_id");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnName("end_date");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnName("start_date");

                    b.Property<int>("TourId")
                        .HasColumnName("tour_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("VisitId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("visit");
                });

            modelBuilder.Entity("Artour.Domain.Models.City", b =>
                {
                    b.HasOne("Artour.Domain.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Artour.Domain.Models.Comment", b =>
                {
                    b.HasOne("Artour.Domain.Models.Tour")
                        .WithMany("Comments")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Artour.Domain.Models.Country", b =>
                {
                    b.HasOne("Artour.Domain.Models.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Artour.Domain.Models.Sight", b =>
                {
                    b.HasOne("Artour.Domain.Models.Tour", "Tour")
                        .WithMany("Sights")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Artour.Domain.Models.SightImage", b =>
                {
                    b.HasOne("Artour.Domain.Models.Sight")
                        .WithMany("Images")
                        .HasForeignKey("SightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Artour.Domain.Models.SightSeen", b =>
                {
                    b.HasOne("Artour.Domain.Models.Sight")
                        .WithMany("SightSeens")
                        .HasForeignKey("SightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Artour.Domain.Models.Visit")
                        .WithMany("SightSeens")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Artour.Domain.Models.Tour", b =>
                {
                    b.HasOne("Artour.Domain.Models.City", "City")
                        .WithMany("Tours")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Artour.Domain.Models.Visit", b =>
                {
                    b.HasOne("Artour.Domain.Models.Tour", "Tour")
                        .WithMany("Visits")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Artour.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
